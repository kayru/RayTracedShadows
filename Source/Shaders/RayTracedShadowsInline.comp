#version 460
#extension GL_EXT_ray_query   : enable

layout (binding = 0) uniform Constants
{
	vec4 cameraPosition;
	vec4 cameraDirection;
	vec4 lightDirection;
	vec4 renderTargetSize;
};

layout(binding = 1) uniform sampler defaultSampler;
layout(binding = 2) uniform texture2D gbufferPositionTexture;
layout(binding = 3, r8) uniform image2D outputShadowMask;

layout(set=0, binding = 4) uniform accelerationStructureEXT TLAS;

float computeEpsilonForValue(float f, uint exponentDiff)
{
	uint u = floatBitsToUint(f);
	uint exponent = bitfieldExtract(u, 23, 8);
	exponent -= min(exponentDiff, exponent);
	u = bitfieldInsert(u, exponent, 23, 8);
	return uintBitsToFloat(u);
}

float max3(vec3 v)
{
	return max(max(v.x, v.y), v.z);
}

layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
	ivec2 pixelIndex = ivec2(gl_GlobalInvocationID.xy);

	vec3 direction = lightDirection.xyz;
	vec3 cameraRelativePosition = texelFetch(sampler2D(gbufferPositionTexture, defaultSampler), pixelIndex, 0).xyz;
	vec3 origin = cameraPosition.xyz + cameraRelativePosition;

	// TODO: we should be pushing the ray away in the direction of the surface normal
	float shadowRayBias = max(
		computeEpsilonForValue(max3(abs(origin)), 13),
		computeEpsilonForValue(max3(abs(cameraRelativePosition)), 13));

	uint rayFlags = gl_RayFlagsOpaqueNV | gl_RayFlagsTerminateOnFirstHitNV;

	rayQueryEXT rayQuery;
	rayQueryInitializeEXT(rayQuery, 
		TLAS,
		rayFlags,       // uint rayFlags
		~0u,            // uint cullMask
		origin,         // vec3 origin
		shadowRayBias,  // float Tmin
		direction,      // vec3 direction
		1e9             // float Tmax
	);

	rayQueryProceedEXT(rayQuery);
	uint IntersectionType = rayQueryGetIntersectionTypeEXT(rayQuery, true);
	int payload = IntersectionType == gl_RayQueryCommittedIntersectionNoneEXT ? 1 : 0;

	ivec4 result = ivec4(payload);

	imageStore(outputShadowMask, pixelIndex, result);
}
